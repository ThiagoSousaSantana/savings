// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :exec
INSERT INTO expense (description, value) VALUES ($1, $2)
`

type CreateExpenseParams struct {
	Description string
	Value       string
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, createExpense, arg.Description, arg.Value)
	return err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expense WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getExpenseById = `-- name: GetExpenseById :one
SELECT id, description, value FROM expense WHERE id = $1
`

func (q *Queries) GetExpenseById(ctx context.Context, id int32) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpenseById, id)
	var i Expense
	err := row.Scan(&i.ID, &i.Description, &i.Value)
	return i, err
}

const listExpenses = `-- name: ListExpenses :many
SELECT id, description, value FROM expense
`

func (q *Queries) ListExpenses(ctx context.Context) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, listExpenses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(&i.ID, &i.Description, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expense SET description = $2, value = $3 WHERE id = $1 RETURNING id, description, value
`

type UpdateExpenseParams struct {
	ID          int32
	Description string
	Value       string
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, updateExpense, arg.ID, arg.Description, arg.Value)
	var i Expense
	err := row.Scan(&i.ID, &i.Description, &i.Value)
	return i, err
}
